# - name: Temporarily disable SELinux if it's enforcing
#   block:
#   - name: Check SELinux status
#     ansible.builtin.command: getenforce
#     register: selinux_status

#   - name: Disable SELinux if enforcing
#     ansible.builtin.command: setenforce 0
#     when: selinux_status.stdout == "Enforcing"

#   - name: Set a fact to carry around the SELinux status
#     ansible.builtin.set_fact:
#       selinux_was_enforcing: "{{ selinux_status.stdout == 'Enforcing' }}"
#   when: k3s_selinux == "false"
#   tags: k3s

# ethtool -K flannel.1 tx-checksum-ip-generic off
- name: Disable selinux
  ansible.posix.selinux:
    state: permissive
    policy: targeted
  when: k3s_selinux == "false"
  tags: k3s

- name: Download the k3s install script
  ansible.builtin.get_url:
    url: "{{ k3s_install_script_url }}"
    dest: /usr/local/bin/k3s_install.sh
    mode: '0755'
  register: download_k3s_install 
  tags: k3s

- name: Collect package facts
  ansible.builtin.package_facts:
    manager: auto
  tags: k3s  

- name: Disable network manager
  block:
  - name: Disable nm-cloud-setup.service to avoid conflicts with docker
    ansible.builtin.systemd_service:
      name: nm-cloud-setup
      state: stopped
      enabled: false
  - name: Disable nm-cloud-setup.timer to avoid conflicts with docker
    ansible.builtin.systemd_service:
      name: nm-cloud-setup.timer
      state: stopped
      enabled: false
  when: ansible_facts['os_family'] == 'RedHat' and 'NetworkManager-cloud-setup' in ansible_facts.packages
  tags: k3s  

- name: Install bind-utils
  ansible.builtin.package:
    name: bind-utils
    state: present
  when: ansible_facts['os_family'] == 'RedHat' and (inventory_hostname in groups['servers'])
  tags: k3s

- name: DEBUG primary host logic
  debug:
    msg: "Primary? {{ hostvars[inventory_hostname]['primary'] | default(false) }}"
  when: inventory_hostname in groups['servers']
  tags: k3s

- name: Ensure k3s config directory exists
  ansible.builtin.file:
    path: /etc/rancher/k3s
    state: directory
    owner: root
    group: root
    mode: '0755'
  when:
    - inventory_hostname in groups['servers']
    - hostvars[inventory_hostname]['primary'] | default(false) | bool
  tags: k3s, k3s-primary

- name: Create the k3s config for the primary server
  ansible.builtin.template:
    src: "{{ role_path }}/templates/k3s-config-primary.yaml.j2"
    dest: /etc/rancher/k3s/config.yaml
    mode: '0644'
  when:
    - inventory_hostname in groups['servers']
    - hostvars[inventory_hostname]['primary'] | default(false) | bool
  tags: k3s, k3s-primary

- name: Install k3s primary server
  ansible.builtin.command: >
    /usr/local/bin/k3s_install.sh --disable=traefik
  environment:
    INSTALL_K3S_SKIP_SELINUX_RPM: "{{ 'true' if k3s_selinux == 'false' else 'false' }}"
#    INSTALL_K3S_EXEC: "{{ install_k3s_exec.primary_env }}"
#    K3S_CLUSTER_INIT: "true"
#    K3S_TOKEN: "{{ k3s_token }}"
#    K3S_KUBECONFIG_MODE: "644"
  when:
    - inventory_hostname in groups['servers']
    - hostvars[inventory_hostname]['primary'] | default(false) | bool
  args:
    creates: /etc/rancher/k3s/k3s.yaml
  tags: k3s, k3s-primary

- name: Wait for K3s API to become reachable
  ansible.builtin.wait_for:
    host: "{{ k3s_url }}"
    port: 6443
    delay: 5
    timeout: 300
    state: started
  when:
    - inventory_hostname in groups['k3s_cluster'] and hostvars[inventory_hostname]['primary'] is false
  tags: k3s, k3s-standby

- name: Install k3s standby servers
  ansible.builtin.command: >
    /usr/local/bin/k3s_install.sh
  environment:
#    INSTALL_K3S_SKIP_SELINUX_RPM: "{{ k3s_selinux == 'false' | ternary('true', 'false') }}"
    INSTALL_K3S_SKIP_SELINUX_RPM: "{{ 'true' if k3s_selinux == 'false' else 'false' }}"
    INSTALL_K3S_EXEC: "{{ install_k3s_exec.standby_env }}"
    K3S_URL: "https://{{ k3s_url }}:6443"
    K3S_TOKEN: "{{ k3s_token }}"
    K3S_KUBECONFIG_MODE: "644"
  when:
    - inventory_hostname in groups['servers']
    - not hostvars[inventory_hostname]['primary'] | default(false) | bool
  args:
    creates: /etc/rancher/k3s/k3s.yaml
  tags: k3s, k3s-standby

- name: Install k3s on the agents using the install script
  ansible.builtin.command: >
    /usr/local/bin/k3s_install.sh
  environment:
#    INSTALL_K3S_SKIP_SELINUX_RPM: "{{ k3s_selinux == 'false' | ternary('true', 'false') }}"
    INSTALL_K3S_SKIP_SELINUX_RPM: "{{ 'true' if k3s_selinux == 'false' else 'false' }}"
    INSTALL_K3S_EXEC: "{{ install_k3s_exec.agent_env }}"
    K3S_URL: "https://{{ k3s_url }}:6443"
    K3S_TOKEN: "{{ k3s_token }}"
  when: inventory_hostname in groups['agents']
  args:
    creates: /usr/local/bin/k3s
  tags: k3s

- name: Retrieve the kubeconfig from the primary server
  ansible.builtin.fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ role_path }}/../../kubeconfig.yaml"
    flat: yes
  when:
    - inventory_hostname in groups['servers']
    - hostvars[inventory_hostname]['primary'] | default(false) | bool
  run_once: true
  tags: k3s, k3s-primary

- name: Update the kubeconfig to use the correct server address
  ansible.builtin.replace:
    path: "{{ role_path }}/../../kubeconfig.yaml"
    regexp: '127\.0\.0\.1'
    replace: "{{ k3s_url }}"
  delegate_to: localhost
  run_once: true
  tags: k3s, k3s-primary

- name: Verify k3s nodes
  kubernetes.core.k8s_info:
    kind: Node
    kubeconfig: "{{ role_path }}/../../kubeconfig.yaml"
  register: k3s_nodes
  delegate_to: localhost
  run_once: true
  tags: k3s, k3s-primary

- name: Dump the node lists
  ansible.builtin.debug:
    msg: "Nodes: {{ k3s_nodes.resources | map(attribute='metadata.name') | list }}"
  delegate_to: localhost
  run_once: true
  tags: k3s

# - name: Re-enable SELinux if it was enforcing
#   block:
#   - name: Restorecon the k3s binary
#     ansible.builtin.command: restorecon -v /usr/local/bin/k3s

#   - name: Re-enable SELinux
#     ansible.builtin.command: setenforce 1
#   when: (k3s_selinux | string == "false") and (selinux_was_enforcing | default(false) | bool)
#   tags: k3s